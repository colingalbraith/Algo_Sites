<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Graph Representation Visualizer</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .controls {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        
        .control-group {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
            justify-content: center;
        }
        
        button {
            background: linear-gradient(135deg, #ff6b6b, #ff8e8e);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);
        }
        
        button:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .graph-type-btn {
            background: linear-gradient(135deg, #4ecdc4, #44a08d);
            box-shadow: 0 4px 15px rgba(78, 205, 196, 0.3);
        }
        
        .graph-type-btn:hover {
            box-shadow: 0 6px 20px rgba(78, 205, 196, 0.4);
        }
        
        .graph-type-btn.active {
            background: linear-gradient(135deg, #45b7aa, #3a8b7f);
        }
        
        input[type="range"] {
            width: 150px;
            height: 6px;
            border-radius: 3px;
            background: #ddd;
            outline: none;
            -webkit-appearance: none;
        }
        
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #ff6b6b;
            cursor: pointer;
        }
        
        .visualization-area {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .graph-container {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            min-height: 400px;
        }
        
        .representation-container {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            display: grid;
            grid-template-rows: 1fr 1fr;
            gap: 20px;
        }
        
        .matrix-container, .list-container {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 15px;
            border: 2px solid #e9ecef;
            position: relative;
            overflow: auto;
        }
        
        .matrix-container h3, .list-container h3 {
            color: #495057;
            margin-bottom: 15px;
            text-align: center;
        }
        
        .matrix {
            display: grid;
            gap: 2px;
            justify-content: center;
            font-family: 'Courier New', monospace;
        }
        
        .matrix-cell {
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .matrix-cell.highlighted {
            background: #ff6b6b !important;
            color: white;
            transform: scale(1.1);
        }
        
        .matrix-cell.edge {
            background: #4ecdc4;
            color: white;
        }
        
        .adjacency-list {
            font-family: 'Courier New', monospace;
            line-height: 1.6;
        }
        
        .list-item {
            margin: 8px 0;
            padding: 8px;
            background: white;
            border-radius: 5px;
            border-left: 4px solid #4ecdc4;
            transition: all 0.3s ease;
        }
        
        .list-item.highlighted {
            background: #ff6b6b;
            color: white;
            transform: translateX(10px);
        }
        
        .complexity-panel {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            grid-column: 1 / -1;
        }
        
        .complexity-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .complexity-card {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
        }
        
        .complexity-card h3 {
            margin-bottom: 15px;
            font-size: 1.4em;
        }
        
        .complexity-metric {
            background: rgba(255,255,255,0.2);
            padding: 10px;
            border-radius: 8px;
            margin: 10px 0;
        }
        
        .canvas {
            width: 100%;
            height: 350px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            background: white;
        }
        
        .stats {
            margin-top: 15px;
            text-align: center;
            color: #666;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîó Graph Representation Visualizer</h1>
            <p>Interactive visualization of adjacency matrices vs adjacency lists</p>
        </div>
        
        <div class="controls">
            <div class="control-group">
                <label>Nodes: <span id="nodeCount">5</span></label>
                <input type="range" id="nodeSlider" min="3" max="10" value="5">
                
                <label>Edge Density: <span id="densityCount">30</span>%</label>
                <input type="range" id="densitySlider" min="10" max="80" value="30">
                
                <button id="generateBtn">üé≤ Generate Graph</button>
                <button id="animateBtn">‚ñ∂Ô∏è Animate Operations</button>
                
                <button class="graph-type-btn" id="undirectedBtn">‚ÜîÔ∏è Undirected</button>
                <button class="graph-type-btn active" id="directedBtn">‚û°Ô∏è Directed</button>
            </div>
        </div>
        
        <div class="visualization-area">
            <div class="graph-container">
                <h2>Graph Visualization</h2>
                <canvas id="graphCanvas" class="canvas"></canvas>
                <div class="stats">
                    <div id="graphStats"></div>
                </div>
            </div>
            
            <div class="representation-container">
                <div class="matrix-container">
                    <h3>Adjacency Matrix</h3>
                    <div id="adjacencyMatrix"></div>
                </div>
                
                <div class="list-container">
                    <h3>Adjacency List</h3>
                    <div id="adjacencyList"></div>
                </div>
            </div>
        </div>
        
        <div class="complexity-panel">
            <h2 style="text-align: center; margin-bottom: 20px;">Space & Time Complexity Comparison</h2>
            <div class="complexity-grid">
                <div class="complexity-card">
                    <h3>Adjacency Matrix</h3>
                    <div class="complexity-metric">
                        <strong>Space:</strong> O(V¬≤) = <span id="matrixSpace"></span>
                    </div>
                    <div class="complexity-metric">
                        <strong>Edge Check:</strong> O(1)
                    </div>
                    <div class="complexity-metric">
                        <strong>Add Edge:</strong> O(1)
                    </div>
                    <div class="complexity-metric">
                        <strong>Find Neighbors:</strong> O(V)
                    </div>
                </div>
                
                <div class="complexity-card">
                    <h3>Adjacency List</h3>
                    <div class="complexity-metric">
                        <strong>Space:</strong> O(V + E) = <span id="listSpace"></span>
                    </div>
                    <div class="complexity-metric">
                        <strong>Edge Check:</strong> O(degree)
                    </div>
                    <div class="complexity-metric">
                        <strong>Add Edge:</strong> O(1)
                    </div>
                    <div class="complexity-metric">
                        <strong>Find Neighbors:</strong> O(degree)
                    </div>
                </div>
                
                <div class="complexity-card">
                    <h3>Memory Usage</h3>
                    <div class="complexity-metric">
                        <strong>Matrix:</strong> <span id="matrixMemory"></span> bytes
                    </div>
                    <div class="complexity-metric">
                        <strong>List:</strong> <span id="listMemory"></span> bytes
                    </div>
                    <div class="complexity-metric">
                        <strong>Ratio:</strong> <span id="memoryRatio"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        class GraphVisualization {
            constructor() {
                this.canvas = document.getElementById('graphCanvas');
                this.ctx = this.canvas.getContext('2d');
                this.nodes = [];
                this.edges = [];
                this.adjacencyMatrix = [];
                this.adjacencyList = {};
                this.isDirected = true;
                this.animationId = null;
                
                this.setupCanvas();
                this.setupEventListeners();
                this.generateGraph();
            }
            
            setupCanvas() {
                const rect = this.canvas.getBoundingClientRect();
                this.canvas.width = rect.width * window.devicePixelRatio;
                this.canvas.height = rect.height * window.devicePixelRatio;
                this.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
                this.canvas.style.width = rect.width + 'px';
                this.canvas.style.height = rect.height + 'px';
            }
            
            setupEventListeners() {
                document.getElementById('nodeSlider').addEventListener('input', (e) => {
                    document.getElementById('nodeCount').textContent = e.target.value;
                });
                
                document.getElementById('densitySlider').addEventListener('input', (e) => {
                    document.getElementById('densityCount').textContent = e.target.value;
                });
                
                document.getElementById('generateBtn').addEventListener('click', () => {
                    this.generateGraph();
                });
                
                document.getElementById('animateBtn').addEventListener('click', () => {
                    this.animateOperations();
                });
                
                document.getElementById('directedBtn').addEventListener('click', () => {
                    this.setGraphType(true);
                });
                
                document.getElementById('undirectedBtn').addEventListener('click', () => {
                    this.setGraphType(false);
                });
            }
            
            setGraphType(directed) {
                this.isDirected = directed;
                document.getElementById('directedBtn').classList.toggle('active', directed);
                document.getElementById('undirectedBtn').classList.toggle('active', !directed);
                this.generateGraph();
            }
            
            generateGraph() {
                const nodeCount = parseInt(document.getElementById('nodeSlider').value);
                const density = parseInt(document.getElementById('densitySlider').value);
                
                this.createNodes(nodeCount);
                this.createEdges(density);
                this.buildAdjacencyMatrix();
                this.buildAdjacencyList();
                this.drawGraph();
                this.displayRepresentations();
                this.updateComplexityAnalysis();
            }
            
            createNodes(count) {
                this.nodes = [];
                const centerX = this.canvas.width / (2 * window.devicePixelRatio);
                const centerY = this.canvas.height / (2 * window.devicePixelRatio);
                const radius = Math.min(centerX, centerY) * 0.7;
                
                for (let i = 0; i < count; i++) {
                    const angle = (2 * Math.PI * i) / count;
                    this.nodes.push({
                        id: i,
                        x: centerX + radius * Math.cos(angle),
                        y: centerY + radius * Math.sin(angle),
                        label: String.fromCharCode(65 + i)
                    });
                }
            }
            
            createEdges(density) {
                this.edges = [];
                const nodeCount = this.nodes.length;
                const maxEdges = this.isDirected ? nodeCount * (nodeCount - 1) : nodeCount * (nodeCount - 1) / 2;
                const targetEdges = Math.floor(maxEdges * density / 100);
                
                const possibleEdges = [];
                for (let i = 0; i < nodeCount; i++) {
                    for (let j = 0; j < nodeCount; j++) {
                        if (i !== j) {
                            if (this.isDirected || i < j) {
                                possibleEdges.push([i, j]);
                            }
                        }
                    }
                }
                
                // Shuffle and take required number of edges
                for (let i = possibleEdges.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [possibleEdges[i], possibleEdges[j]] = [possibleEdges[j], possibleEdges[i]];
                }
                
                this.edges = possibleEdges.slice(0, targetEdges);
            }
            
            buildAdjacencyMatrix() {
                const n = this.nodes.length;
                this.adjacencyMatrix = Array(n).fill().map(() => Array(n).fill(0));
                
                this.edges.forEach(([from, to]) => {
                    this.adjacencyMatrix[from][to] = 1;
                    if (!this.isDirected) {
                        this.adjacencyMatrix[to][from] = 1;
                    }
                });
            }
            
            buildAdjacencyList() {
                this.adjacencyList = {};
                this.nodes.forEach(node => {
                    this.adjacencyList[node.id] = [];
                });
                
                this.edges.forEach(([from, to]) => {
                    this.adjacencyList[from].push(to);
                    if (!this.isDirected) {
                        this.adjacencyList[to].push(from);
                    }
                });
            }
            
            drawGraph() {
                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                
                // Draw edges
                this.ctx.strokeStyle = '#4ecdc4';
                this.ctx.lineWidth = 2;
                
                this.edges.forEach(([from, to]) => {
                    const nodeFrom = this.nodes[from];
                    const nodeTo = this.nodes[to];
                    
                    this.ctx.beginPath();
                    this.ctx.moveTo(nodeFrom.x, nodeFrom.y);
                    this.ctx.lineTo(nodeTo.x, nodeTo.y);
                    this.ctx.stroke();
                    
                    if (this.isDirected) {
                        this.drawArrow(nodeFrom, nodeTo);
                    }
                });
                
                // Draw nodes
                this.nodes.forEach(node => {
                    this.ctx.beginPath();
                    this.ctx.arc(node.x, node.y, 20, 0, 2 * Math.PI);
                    this.ctx.fillStyle = '#ff6b6b';
                    this.ctx.fill();
                    this.ctx.strokeStyle = '#fff';
                    this.ctx.lineWidth = 3;
                    this.ctx.stroke();
                    
                    this.ctx.fillStyle = '#fff';
                    this.ctx.font = 'bold 16px Arial';
                    this.ctx.textAlign = 'center';
                    this.ctx.textBaseline = 'middle';
                    this.ctx.fillText(node.label, node.x, node.y);
                });
                
                // Update stats
                document.getElementById('graphStats').innerHTML = 
                    `Nodes: ${this.nodes.length} | Edges: ${this.edges.length} | Density: ${(this.edges.length / (this.nodes.length * (this.nodes.length - 1) / (this.isDirected ? 1 : 2)) * 100).toFixed(1)}%`;
            }
            
            drawArrow(from, to) {
                const angle = Math.atan2(to.y - from.y, to.x - from.x);
                const arrowLength = 15;
                const arrowAngle = Math.PI / 6;
                
                const endX = to.x - 20 * Math.cos(angle);
                const endY = to.y - 20 * Math.sin(angle);
                
                this.ctx.beginPath();
                this.ctx.moveTo(endX, endY);
                this.ctx.lineTo(
                    endX - arrowLength * Math.cos(angle - arrowAngle),
                    endY - arrowLength * Math.sin(angle - arrowAngle)
                );
                this.ctx.moveTo(endX, endY);
                this.ctx.lineTo(
                    endX - arrowLength * Math.cos(angle + arrowAngle),
                    endY - arrowLength * Math.sin(angle + arrowAngle)
                );
                this.ctx.stroke();
            }
            
            displayRepresentations() {
                // Display adjacency matrix
                const matrixContainer = document.getElementById('adjacencyMatrix');
                const n = this.nodes.length;
                
                let matrixHTML = '<div class="matrix" style="grid-template-columns: repeat(' + (n + 1) + ', 1fr);">';
                
                // Header row
                matrixHTML += '<div class="matrix-cell" style="background: #6c757d; color: white;"></div>';
                for (let i = 0; i < n; i++) {
                    matrixHTML += `<div class="matrix-cell" style="background: #6c757d; color: white;">${this.nodes[i].label}</div>`;
                }
                
                // Data rows
                for (let i = 0; i < n; i++) {
                    matrixHTML += `<div class="matrix-cell" style="background: #6c757d; color: white;">${this.nodes[i].label}</div>`;
                    for (let j = 0; j < n; j++) {
                        const value = this.adjacencyMatrix[i][j];
                        const cellClass = value === 1 ? 'matrix-cell edge' : 'matrix-cell';
                        matrixHTML += `<div class="${cellClass}" data-row="${i}" data-col="${j}">${value}</div>`;
                    }
                }
                matrixHTML += '</div>';
                matrixContainer.innerHTML = matrixHTML;
                
                // Display adjacency list
                const listContainer = document.getElementById('adjacencyList');
                let listHTML = '<div class="adjacency-list">';
                
                Object.keys(this.adjacencyList).forEach(nodeId => {
                    const neighbors = this.adjacencyList[nodeId];
                    const nodeLabel = this.nodes[nodeId].label;
                    const neighborLabels = neighbors.map(id => this.nodes[id].label).join(', ');
                    listHTML += `<div class="list-item" data-node="${nodeId}">
                        <strong>${nodeLabel}:</strong> [${neighborLabels}]
                    </div>`;
                });
                
                listHTML += '</div>';
                listContainer.innerHTML = listHTML;
            }
            
            updateComplexityAnalysis() {
                const n = this.nodes.length;
                const e = this.edges.length * (this.isDirected ? 1 : 2);
                
                // Space complexity
                document.getElementById('matrixSpace').textContent = `${n}¬≤ = ${n * n}`;
                document.getElementById('listSpace').textContent = `${n} + ${e} = ${n + e}`;
                
                // Memory usage (approximate)
                const matrixMemory = n * n * 4; // 4 bytes per integer
                const listMemory = n * 8 + e * 4; // 8 bytes per node + 4 bytes per edge
                
                document.getElementById('matrixMemory').textContent = matrixMemory.toLocaleString();
                document.getElementById('listMemory').textContent = listMemory.toLocaleString();
                document.getElementById('memoryRatio').textContent = 
                    matrixMemory > listMemory ? 
                    `Matrix uses ${(matrixMemory / listMemory).toFixed(1)}x more` :
                    `List uses ${(listMemory / matrixMemory).toFixed(1)}x more`;
            }
            
            async animateOperations() {
                const animateBtn = document.getElementById('animateBtn');
                animateBtn.disabled = true;
                animateBtn.textContent = 'üîÑ Animating...';
                
                // Clear previous highlights
                document.querySelectorAll('.highlighted').forEach(el => {
                    el.classList.remove('highlighted');
                });
                
                // Animate edge checking
                for (let i = 0; i < 3; i++) {
                    const randomEdge = this.edges[Math.floor(Math.random() * this.edges.length)];
                    const [from, to] = randomEdge;
                    
                    // Highlight matrix cell
                    const matrixCell = document.querySelector(`[data-row="${from}"][data-col="${to}"]`);
                    if (matrixCell) {
                        matrixCell.classList.add('highlighted');
                    }
                    
                    // Highlight list item
                    const listItem = document.querySelector(`[data-node="${from}"]`);
                    if (listItem) {
                        listItem.classList.add('highlighted');
                    }
                    
                    await this.sleep(1000);
                    
                    // Remove highlights
                    if (matrixCell) matrixCell.classList.remove('highlighted');
                    if (listItem) listItem.classList.remove('highlighted');
                    
                    await this.sleep(500);
                }
                
                animateBtn.disabled = false;
                animateBtn.textContent = '‚ñ∂Ô∏è Animate Operations';
            }
            
            sleep(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }
        }
        
        // Initialize the visualization when the page loads
        window.addEventListener('load', () => {
            new GraphVisualization();
        });
        
        // Handle window resize
        window.addEventListener('resize', () => {
            setTimeout(() => {
                const viz = new GraphVisualization();
            }, 100);
        });
    </script>
</body>
</html>